---
name: "build-executables"

on:
  push:
    # - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

# Available machines:
# https://github.com/actions/runner-images/tree/main

jobs:
  Linux_GCC14_64bit:
    strategy:
      matrix:
        os: [ ubuntu-24.04, ubuntu-24.04-arm ]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout LandSandBoat server
      uses: actions/checkout@v4
      with:
        repository: LandSandBoat/server
        submodules: 'recursive'
        fetch-depth: 1
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y software-properties-common cmake libmariadb-dev-compat libluajit-5.1-dev libzmq3-dev zlib1g-dev libssl-dev binutils-dev curl jq

        # Required for 22.04 Image, remove on transition to 24.04
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
        sudo apt-get update -y
        sudo apt-get install gcc-14 g++-14

    - name: Cache 'build' folder
      uses: actions/cache@v4
      with:
        path: build
        key: ${{ runner.os }}-gcc
    - name: Configure CMake
      run: |
        export CC=/usr/bin/gcc-14
        export CXX=/usr/bin/g++-14
        mkdir -p build
        if [ $(uname -p) = "x86_64" ]; then 
          CFLAGS=-m64 CXXFLAGS=-m64 LDFLAGS=-m64 cmake -S . -B build
        if  
        if [ $(uname -p) = "aarch64"  ]; then
          cmake -S . -B build
        fi
    - name: Build
      run: |
        cmake --build build -j4
        curl -sLO $(curl -s "https://api.github.com/repos/LandSandBoat/xiloader/releases" | jq -r '.[0].assets.[].browser_download_url')
        chmod +x xi_connect xi_map xi_search xi_world
    - name: Archive Executables
      uses: actions/upload-artifact@v4
      with:
        name: linux_$(uname -r)
        path: |
          xiloader.exe
          xi_connect
          xi_map
          xi_search
          xi_world

  # Full_Startup_Checks_Linux:
  #   runs-on: ubuntu-24.04
  #   needs: Linux_GCC14_64bit
  #   services:
  #     mysql:
  #       image: mariadb:10.6
  #       env:
  #         MYSQL_DATABASE: xidb
  #         MYSQL_ROOT_PASSWORD: root
  #       ports:
  #         - 3306:3306
  #       options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=10s --health-retries=10
  #   steps:
  #   - uses: actions/checkout@v4
  #     with:
  #       repository: LandSandBoat/server
  #       submodules: 'recursive'
  #       fetch-depth: 1
  #   - uses: actions/download-artifact@v4
  #     with:
  #       name: linux_executables
  #       path: .
  #   - name: Install Dependencies
  #     # TODO: Properly use python venv
  #     run: |
  #       python3 -m pip config set global.break-system-packages true
  #       sudo apt-get update
  #       sudo apt-get install -y software-properties-common cmake mariadb-client libmariadb-dev-compat libluajit-5.1-dev libzmq3-dev zlib1g-dev libssl-dev luarocks binutils-dev
  #       python3 -m pip install -r tools/requirements.txt
  #   - name: Verify MySQL connection from container
  #     run: |
  #       mysql -h 127.0.0.1 -uroot -proot -e "SHOW DATABASES"
  #   - name: Import SQL files
  #     shell: bash
  #     run: |
  #       python3 ./tools/dbtool.py setup xidb
  #   - name: Copy settings
  #     run: |
  #       cp settings/default/* settings/
  #   - name: Startup and character login checks
  #     uses: nick-invision/retry@v3
  #     with:
  #       timeout_minutes: 15
  #       max_attempts: 3
  #       retry_on: timeout
  #       shell: bash
  #       command: |
  #         chmod +x xi_connect
  #         chmod +x xi_map
  #         chmod +x xi_search
  #         chmod +x xi_world
  #         ls -l

  #         printf "\nStart server processes\n"
  #         screen -d -m -S xi_connect ./xi_connect --log login-server.log
  #         screen -d -m -S xi_search ./xi_search --log search-server.log
  #         screen -d -m -S xi_map ./xi_map --log map-server.log
  #         screen -d -m -S xi_world ./xi_world --log world-server.log

  #         printf "\nWaiting 5m for servers to fully start up\n"
  #         sleep 300s

  #         # define bash helper function to help diagnose any sql errors
  #         function mysqlcmd() { mysql xidb -h 127.0.0.1 -uroot -proot --verbose -e "$@"; }
  #         printf "\nPopulating database\n"

  #         # Clean out anything already there (just in case)
  #         mysqlcmd "DELETE FROM accounts;"
  #         mysqlcmd "DELETE FROM chars;"
  #         mysqlcmd "DELETE FROM char_look;"
  #         mysqlcmd "DELETE FROM char_stats;"

  #         # Clean tables that are made from triggers on insert to char table
  #         mysqlcmd "DELETE FROM char_equip;"
  #         mysqlcmd "DELETE FROM char_exp;"
  #         mysqlcmd "DELETE FROM char_history;"
  #         mysqlcmd "DELETE FROM char_inventory;"
  #         mysqlcmd "DELETE FROM char_jobs;"
  #         mysqlcmd "DELETE FROM char_pet;"
  #         mysqlcmd "DELETE FROM char_points;"
  #         mysqlcmd "DELETE FROM char_profile;"
  #         mysqlcmd "DELETE FROM char_storage;"
  #         mysqlcmd "DELETE FROM char_unlocks;"

  #         # Create an account
  #         PASSWORD_HASH=\$2a\$12\$piFoDKvu80KK68xLgQFpt.ZCqVPTjPmhSUfA31.Yw9n404dTsrR6q
  #         mysqlcmd "INSERT INTO accounts (id, login, password, timecreate, timelastmodify, status, priv)
  #         VALUES(1000, 'admin1', '$PASSWORD_HASH', NOW(), NOW(), 1, 1);
  #         SELECT id, login, content_ids FROM accounts;"

  #         # Create a character
  #         mysqlcmd "INSERT INTO chars (charid, accid, charname, pos_zone, nation, gmlevel)
  #         VALUES(1, 1000, 'Test', 0, 0, 5);
  #         SELECT charid, accid, charname, pos_zone FROM chars;"

  #         # Set char_look (default is 0 and trips up scripting)
  #         mysqlcmd "INSERT INTO char_look (charid, face, race, size, head, body, hands, legs, feet, main, sub, ranged)
  #         VALUES (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
  #         SELECT charid, face, race FROM char_look;"

  #         # Populate more char tables with defaults
  #         mysqlcmd "INSERT INTO char_stats (charid, mjob)
  #         VALUES(1, 1);
  #         SELECT charid, mjob FROM char_stats;"

  #         # Update character information
  #         # Place near some Robber Crabs in Kuftal Tunnel
  #         mysqlcmd "UPDATE chars
  #         SET
  #             pos_zone = 174,
  #             pos_prevzone = 174,
  #             pos_x = 55,
  #             pos_y = -9,
  #             pos_z = -140
  #         WHERE charid = 1;"

  #         mysqlcmd "SELECT charid, accid, charname, pos_zone, pos_x, pos_y, pos_z FROM chars;"
  #         # Set GodMode CharVar = 1
  #         mysqlcmd "INSERT INTO char_vars(charid, varname, value)
  #         VALUES(1, 'GodMode', 1);"

  #         printf "\nRunning HeadlessXI for 60 seconds\n"
  #         python3 << EOF
  #         import time
  #         try:
  #             from tools.headlessxi.hxiclient import HXIClient
  #             hxi_client = HXIClient('admin1', 'admin1', 'localhost')
  #             hxi_client.login()
  #             print('Sleeping 60s')
  #             time.sleep(60)
  #             hxi_client.logout()
  #             exit(0)
  #         except Exception as e:
  #             exit(-1)
  #         EOF
  #         hxi_result=$?

  #         pkill -SIGINT xi_map
  #         pkill -SIGINT xi_search
  #         pkill -SIGINT xi_connect
  #         pkill -SIGINT xi_world

  #         # fail if hxi had a non-zero exit code
  #         if [[ "$hxi_result" -ne "0" ]]; then
  #             echo "hxi exited with code $hxi_result"
  #             exit $hxi_result
  #         fi
  #   - name: Check for errors and warnings
  #     if: ${{ success() || failure() }}
  #     run: |
  #       cat login-server*.log
  #       cat map-server*.log
  #       cat search-server*.log
  #       cat world-server*.log

  #       if grep -qi "warning\|error\|crash" login-server*.log; then
  #           exit -1
  #       fi

  #       if grep -qi "warning\|error\|crash" map-server*.log; then
  #           exit -1
  #       fi

  #       if grep -qi "warning\|error\|crash" search-server*.log; then
  #           exit -1
  #       fi

  #       if grep -qi "warning\|error\|crash" world-server*.log; then
  #           exit -1
  #       fi

  # MultiInstance_Startup_Checks_Linux:
  #   runs-on: ubuntu-24.04
  #   needs: Linux_GCC14_64bit
  #   services:
  #     mysql:
  #       image: mariadb:10.6
  #       env:
  #         MYSQL_DATABASE: xidb
  #         MYSQL_ROOT_PASSWORD: root
  #       ports:
  #         - 3306:3306
  #       options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=10s --health-retries=10
  #   steps:
  #   - uses: actions/checkout@v4
  #     with:
  #       repository: LandSandBoat/server
  #       submodules: 'recursive'
  #       fetch-depth: 1
  #   - uses: actions/download-artifact@v4
  #     with:
  #       name: linux_executables
  #       path: .
  #   - name: Install Dependencies
  #     # TODO: Properly use python venv
  #     run: |
  #       python3 -m pip config set global.break-system-packages true
  #       sudo apt-get update
  #       sudo apt-get install -y software-properties-common cmake mariadb-client libmariadb-dev-compat libluajit-5.1-dev libzmq3-dev zlib1g-dev libssl-dev luarocks binutils-dev
  #       python3 -m pip install -r tools/requirements.txt
  #   - name: Verify MySQL connection from container
  #     run: |
  #       mysql -h 127.0.0.1 -uroot -proot -e "SHOW DATABASES"
  #   - name: Import SQL files
  #     shell: bash
  #     run: |
  #       python3 ./tools/dbtool.py setup xidb
  #   - name: Assign odd zones a different port
  #     run: |
  #       mysql xidb -h 127.0.0.1 -uroot -proot -e "UPDATE xidb.zone_settings SET zoneport = 54231 WHERE zoneid % 2 = 0;"
  #   - name: Copy settings
  #     run: |
  #       cp settings/default/* settings/
  #   - name: Startup checks
  #     env:
  #       MYSQL_HOST: mysql
  #     run: |
  #       chmod +x xi_connect
  #       chmod +x xi_map
  #       chmod +x xi_search
  #       chmod +x xi_world
  #       ls -l

  #       printf "\nStart server processes\n"
  #       screen -d -m -S xi_connect ./xi_connect --log login-server.log
  #       screen -d -m -S xi_search ./xi_search --log search-server.log
  #       screen -d -m -S xi_map ./xi_map --log map-server-0.log --ip 127.0.0.1 --port 54230
  #       screen -d -m -S xi_map ./xi_map --log map-server-1.log --ip 127.0.0.1 --port 54231
  #       screen -d -m -S xi_world ./xi_world --log world-server.log
  #       sleep 300s
  #       killall screen
  #   - name: Check for errors and warnings
  #     if: ${{ success() || failure() }}
  #     run: |
  #       cat login-server*.log
  #       cat search-server*.log
  #       cat map-server-0*.log
  #       cat map-server-1*.log
  #       cat world-server*.log

  #       if grep -qi "warning\|error\|crash" login-server*.log; then
  #           exit -1
  #       fi

  #       if grep -qi "warning\|error\|crash" search-server*.log; then
  #           exit -1
  #       fi

  #       if grep -qi "warning\|error\|crash" map-server-0*.log; then
  #           exit -1
  #       fi

  #       if grep -qi "warning\|error\|crash" map-server-1*.log; then
  #         exit -1
  #       fi

  #       if grep -qi "warning\|error\|crash" world-server*.log; then
  #         exit -1
  #       fi